name: deploy-dev

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GEMINI_PROJECT_ID: ${{ secrets.GEMINI_PROJECT_ID }}
      S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
      S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
    steps:
      - name: 체크아웃
        uses: actions/checkout@v3
      - name: JDK 17 사용
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Gradle Wrapper 실행 권한 추가
        run: chmod +x gradlew
      - name: application-dev.yml 덮어쓰기
        run: |
          cd ./src/main/resources
          touch ./application-dev.yml
          echo "${{ secrets.PROPERTIES_DEV }}" > ./application-dev.yml
        shell: bash
      - name: Gradle로 빌드(CI)
        run: ./gradlew build
      - name: 도커허브에 로그인
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER_NAME }}
          password: ${{ secrets.DOCKER_USER_PW }}
      - name: 이미지 빌드
        run: docker build -t ${{ secrets.DOCKER_USER_NAME }}/${{ secrets.DOCKER_IMAGE_NAME }}-be-dev -f Dockerfile.dev .
      - name: 도커허브에 이미지 푸시
        run: docker push ${{ secrets.DOCKER_USER_NAME }}/${{ secrets.DOCKER_IMAGE_NAME }}-be-dev
      - name: AWS EC2에 ssh 접속 후 배포
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_IP_DEV }}
          port: 22
          username: ubuntu
          key: ${{ secrets.AWS_KEY_DEV }}
          script: |
            docker pull ${{ secrets.DOCKER_USER_NAME }}/${{ secrets.DOCKER_IMAGE_NAME }}-be-dev
            docker-compose up -d
